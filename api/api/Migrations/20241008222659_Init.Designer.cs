// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Models;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241008222659_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.TeslaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TeslaAccounts");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.TeslaAccount", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithOne("TeslaAccount")
                        .HasForeignKey("api.Models.TeslaAccount", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("api.Models.TeslaAuthToken", "AuthToken", b1 =>
                        {
                            b1.Property<int>("TeslaAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("AccessToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<TimeOnly?>("ExpiresIn")
                                .HasColumnType("time");

                            b1.Property<string>("IdToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RefreshToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TokenType")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TeslaAccountId");

                            b1.ToTable("TeslaAccounts");

                            b1.ToJson("AuthToken");

                            b1.WithOwner()
                                .HasForeignKey("TeslaAccountId");
                        });

                    b.Navigation("AuthToken");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("TeslaAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
